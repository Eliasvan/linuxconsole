Force feedback for Linux.
By Johann Deneux <deneux@esil.univ-mrs.fr> on 2001/04/22.

----------------------------------------------------------------------------

0. Introduction
~~~~~~~~~~~~~~~
This document describes how to use force feedback devices under Linux. The
goal is not to support these devices as if they were simple input-only devices
(as it is already the case), but to really enable the rendering of force
effects.
At the moment, only I-Force devices are supported, and not officially. That
means I had to find out how the protocol works on my own. Of course, the
information I managed to grasp is far from being complete, and I can not
guarranty that this driver will work for you.
This document only describes the force feedback part of the driver for I-Force
devices. Please read joystick.txt before reading further this document.

2. Instructions to the user
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here are instructions on how to compile and use the driver. In fact, this
driver is the normal iforce.o, input.o and evdev.o drivers written by Vojtech
Pavlik, plus additions to support force feedback.

Before you start, let me WARN you that some devices shake violently during the
initialisation phase. This happens for example with my "AVB Top Shot Pegasus".
To stop this annoying behaviour, move you joystick to its limits. Anyway, you
should keep a hand on your device, in order to avoid it to brake down if
something goes wrong.

At the kernel's compilation:
	- Enable IForce/Serial
	- Enable Event interface

Compile the modules, install them.

You also need inputattach.

You then need to insert the modules into the following order:
% modprobe joydev
% modprobe serport
% sleep 2
% ./inputattach -ifor $2 &
% sleep 2
% modprobe iforce
% modprobe evdev

Please check that you have all the /dev/input entries needed:
cd /dev
rm js*
mkdir input
mknod input/js0 c 13 0
mknod input/js1 c 13 1
mknod input/js2 c 13 2
mknod input/js3 c 13 3
ln -s input/js0 js0
ln -s input/js1 js1
ln -s input/js2 js2
ln -s input/js3 js3

mknod input/event0 c 13 64
mknod input/event1 c 13 65
mknod input/event2 c 13 66
mknod input/event3 c 13 67

2.1 Does it work ?
~~~~~~~~~~~~~~~~~~
There is an utility called fftest that will allow you to test the driver.
% fftest /dev/eventXX

3. Instructions to the developper
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  All interactions are done using the event API. That is, you can use ioctl()
and write() on /dev/input/eventXX.
  This information is subject to change.

3.1 Querying device capabilities
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include <linux/input.h>
#include <sys/ioctl.h>

int ioctl(int file_descriptor, int request, unsigned long *axes);

"request" must be EVIOCGBIT(EV_FF, sizeof(unsigned long))

Axes able to render effects are returned in the long pointed by axes. They are
represented as a bitfield:
  - bit 0 stands for the X axis
  - bit 1 stands for the Y axis
Normally, wheels only have the X axis, while joystick have both X and Y.

3.2 Uploading effects to the device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include <linux/input.h>
#include <sys/ioctl.h>
 
int ioctl(int file_descriptor, int request, struct ff_effect *effect);

"request" must be EVIOCSFF.

"effect" points to a structure describing the effect to upload. The effect is
uploaded, but not played.

3.3 Controlling the playing of effects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Control of playing is done with write(). Below is an example:

#include <linux/input.h>
#include <unistd.h>

	struct input_event play;
	struct input_event stop;
	struct ff_effect effect;
	int fd;
...
	fd = open("/dev/input/eventXX", O_RDWR);
...
	/* Play three times */
	play.type = EV_FF;
	play.code = FF_PLAY | effect.id;
	play.value = 3;
	
	write(fd, (const void*) &play, sizeof(play));
...
	/* Stop an effect */
	stop.type = EV_FF;
	stop.code = FF_STOP | effect.id;
	
	write(fd, (const void*) &play, sizeof(stop));

